/////////////// PAGINA 6 ///////////////////////
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <mkl.h>
main(int argc, char	*argv[]){			
	// matriz de	datos				
	double A[16]	= {	5.0,	5.0,	7.0,	9.0,
			4.0,	8.0,	8.0,	10.0,
			5.0,	7.0,	11.0,	, 11.0,
			6.0,	8.0,	10.0,	14.0};
	int pivot[4]; // vector para los pivotamientos
	// buffer para resultados, recordar que LAPACK destruye los datos 
	double A2[16];
	for (int i = 0; i < 16; i++) A2[i] = A[i];
	// memcpy(A2, A, 16 * sizeof(double));
	// obtener la descomposición LU con pivotamientc|
	int result =LAPACKE_dgetrf(LAPACK_R0W_MA30R, 4, 4, A2, 4, pivot);
	// NOTA: check de result, lo excluimos en este ejemplo
	// imprimir el resultado
	printf("Matriz con L y U mezcladas:\n");
	for (int i = 0; i < 4; i++){
		for (int j = 0; j < 4; j++){
			printf("%lf ”,A2[i*4+j]);
		}
		printf("\n");
	}
	printf("\nVector de pivotamientos:\n");
	for (int i = 0; i < 4; i++) printf("%d ”,pivot[i]);
	printf("\n");
	std::getchar(); 
	return 0;
}
/////////////// PAGINA 9 ///////////////////////
	double determinante = 1.0; 
	for (int i = 0; i < 4; i++){
		if (pivot[i] != (i+l)){ // NOTA: MKL usa como Fortran como fila i+1 
			determinante *= -A2[i*4+i]j // producto de diagonal con -1
		}
		else{
			determinante *= A2[i*4+i];
		}
	}
	printf("\nDeterminante: %lf\n"ídeterminante);
	std::getchar(); 
	return 0;
}
/////////////// PAGINA 10 ///////////////////////
	double B[16];
	memset(B, 0, 16 * sizeof(double));
	for (int i = 0; i < 4; i++) B[i * 4 + i] = 1.0; // matriz identidad 
	result = LAPACKE_dgetrs(LAPACK_ROW_MA:JOR, ’N' ,4,4,A2,4,pivot,B,4); 
	printf("\nMatriz inversa:\n"); 
	for (int i = 0; i < 4; i++){
		for (int j = 0; j < 4; j++){
			printf("%lf ", B[i * 4 + j]);
		}
		printf("\n");
	}

/////////////// PAGINA 11 ///////////////////////
	double C[16];|
	memcpy(C, A2, 16 * sizeof(double))j // copia de la descomposici6n LU 
	result = LAPAC K E_dget ri(LAPAC K_R0W_MA30R,4,C,4,pivot); 
	printf("\nMatriz inversa (segundo metodo):\n"); 
	for (int i = 0; i < 4; i++){
		for (int j = 0; j < 4; j++){
			printf("%lf ", C[i * 4 + j]);
		}
		printf("\n");
	}
	
/////////////// PAGINA 13 ///////////////////////
#include <cstdio>
#include <cstdlib>
#include <random>
#include <mkl.h>
#define N 1000 
#define NTEST 20
int main(int argc, char *argv[]){ 
	double inicio, fin = dsecnd();
	double *A = (double *)mkl_malloc(N*N*sizeof(double), 64);
	double *B = (double *)mkl_malloc(N*sizeof(double), 64);
	int *pivot = (int *)mkl_malloc(N*sizeof(int), 32);
	// distribucion normal de media 0 y varianza 1 
	std::default_random_engine generador; 
	std::normal_distribution<double> aleatorio(0.0, 1.0); 
	for (int i = 0; i < N*N; i++) A[i] = aleatorio(generador); 
	for (int i = 0; i < N; i++) B[i] = aleatorio(generador);
	// matriz A marcadamente diagonal para evitar riesgo de singularidad 
	for (int i = 0; i < N; i++) A[i*N + i] += 10.0;
	int result;
	inicio = dsecnd();
	for (int i = 0; i < NTEST;i++)
		result = LAPACKE_dgesv(LAPACK_R0W_MA30R, N, 1, A, N, pivot, B, 1);
	fin = dsecnd();
	double tiempo = (fin - inicio)/(double)NTEST;
	printf("Tiempo: %lf msec\n", tiempo*1.0e3);
	mkl_free(A);
	mkl_free(B);
	std::getchar(); return 0;
}

/////////////// PAGINA 16 ///////////////////////
Elint main(int argc, char *argv[]){
	// matriz en banda, ku=kl=l 
	double A[25] = {
		1.	.0,	2.	.0,	0.	.0,	0.0,	0.0,
		3,	.0,	4.	,0,	5.	.0,	0.0,	0.0,
		0.	.0,	6.	,0,	7,	.0,	8.0,	0.0,
		0.	.0,	0.	,0,	9.	.0,	10.0;	. 11.0,
		0.	.0,	0.	,0,	0.	.0,	12.0;	. 13.0 };

	double Ab[20] = {	// A codificada en forma de bandas para LU
		0.0,	0.0,	0.0,	0.0, 0.0,
		0.0,	2.0,	5.0,	8.0, 11.0,
		1.0,	4.0,	7.0,	10.0, 13.0,
		3.0,	6.0,	9.0,	12.0, 0.0};

	double B[5] = { 1.0, 2.0, 3.0, 4.0, 5.0 }; 
	double X[5]; 
	int pivot[5]; 
	int result;

	// soluci6n como matriz general
	memcpy(X, B, 5 * sizeof(double)); // la rutina destruye A y B 
	result = LAPACKE_dgesv(LAPACK_R0W_MA30R, 5, 1, A, 5, pivot, X, 1); 
	printf("Solucion general\n");
	for (int i = 0; i < 5; i++) printf("%lf\n", X[i]);

	// soluci6n como matriz de bandas, se debe codificar A en forma de bandas 
	result = LAPACKE_dgbsv(LAPACK_ROW_MAJOR,5,l,l,l,Ab,5,pivot,B,1); 
	printf("\nSolucion en bandas\n"); 
	for (int i = 0; i < 5; i++) printf("%lf\n", B[i]);
	
	std::getchar(); 
	return 0;
}